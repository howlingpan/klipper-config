#####################################################################
#  Preperation 
#####################################################################
# copy this file in the same directory as your printer.cfg
# add 
#    [include retraction.cfg]
# to your printer.cfg
#
# A [save_variables] block is needed since a printer save variable needs to be used to have it available after power up.
# You can skip this if you already have an [save_variables] config block
# e.g: 
#    [save_variables]
#    filename: /home/howlingpan/klipper_config/.variables.stb
# I like to hide that file as there is nothing in that should be modified by the user.
# Do a klipper restart after adding the stuff above
#
# After klipper is back you need define your first plate e.g.
#   RETRACTION_ADD FILAMENT=ABS
#
#####################################################################
#  Macro for the print start or filament gcode section of your slicer 
#####################################################################
# RETRACTION_SELECT [FILAMENT=<id>] [NOZZLE=<value>] : Set retraction speed for
# the different filaments.  If no combo is found 
# the cfg values are used.
# 
# For SuperSlicer/PrusaSlicer this could look like
#    RETRACTION_SELECT FILAMENT=[filament_settings_id]
#
#####################################################################
#  Console ussage
#####################################################################
# RETRACTION_LIST: List all pressure advanve and smooth 
# time for the different filaments
# 
# RETRACTION_ADD FILAMENT=<id> [RETRACT=<value>] [UNRETRACT=<value>]:
# Add new filaments, or change retraction settings for
# for an existing filament nozzle combination.
# Retraction and unretraction speed to the cfg values if not defined at the call
# !!! Caution do not use special characters like äüö or anything else in the name !!!
#
# RETRACTION_REMOVE FILAMENT=<id>: Remove a definition
#
#####################################################################
[gcode_macro RETRACTION_LIST]
description: List all filament retraction settings 
gcode:
  {% if not printer.save_variables.variables.retraction %}
    {action_respond_info("RETRACTION: No filament defined ABORDED")}
  {% else %}
    {% set retraction_dic = printer.save_variables.variables.retraction %}
    {% set out = ["RETRACTION: Defined filaments"] %}
    {% for filament in retraction_dic|sort(attribute='id') %}
      {% set _dummy = out.append("%s" % filament.id) %}
      {% set _dummy = out.append("Retract speed: %1.02f | Unretract speed: %1.02f" % 
        (filament.retract, filament.unretract)) %}
    {% endfor %}
    {action_respond_info(out|join("\n"))}
  {% endif %}

[gcode_macro RETRACTION_ADD]
description: Add or change pressure advance settings
gcode:
  {% if 'FILAMENT' not in params|upper %}
    {action_respond_info("RETRACTION: FILAMENT must be defined use \"RETRACTION_ADD FILAMENT=id\" as a minimum")}
  {% else %}
    {% set cfg = printer.configfile.settings.firmware_retraction %}
    {% set id = params.FILAMENT|string %}
    {% if not printer.save_variables.variables.retraction %} # add first entry
      {action_respond_info("RETRACTION: Initialize with Filament %s" % (id))}
      {% set retraction_dic = [{'id' : id,
                                'retract': params.RETRACT|default(cfg.retract_speed)|float|round(2), 
                                'unretract': params.UNRETRACT|default(cfg.unretract_speed)|float|round(2)}] %}
    {% else %}
      {% set retraction_dic = printer.save_variables.variables.retraction %}
      {% for filament in retraction_dic %}
        {% if id == filament.id %}
          {% set id_index = loop.index0 %}
          {% set change_txt = [] %}
          {% if params.RETRACT is defined %}
            {% set _dummy = change_txt.append("RETRACT") %}
            {% set _dummy = retraction_dic[id_index].update({'retract': params.RETRACT|float|round(2)}) %}
          {% endif %}
          {% if params.UNRETRACT is defined %}
            {% set _dummy = change_txt.append("UNRETRACT") %}
            {% set _dummy = retraction_dic[id_index].update({'unretract': params.UNRETRACT|float|round(2)}) %}
          {% endif %}
          {% if change_txt|length > 0 %}
            {action_respond_info("RETRACTION: Changed %s at Filament %s" % (change_txt|join(" and "),id))}
          {% else %}
            {action_respond_info("RETRACTION: Nothing changed at Filament %s" % (id))}
          {% endif %}
        {% elif loop.last %} # add a new filament
          {action_respond_info("RETRACTION: Add setup for Filament %s" % (id))}
          {% set _dummy = retraction_dic.append({'id' : id, 
                                                 'retract': params.RETRACT|default(cfg.retract_speed)|float|round(2),
                                                 'unretract': params.UNRETRACT|default(cfg.unretract_speed)|float|round(2)}) %}
        {% endif %}
      {% endfor %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=retraction VALUE="{retraction_dic}"
  {% endif %}

[gcode_macro RETRACTION_REMOVE]
description: Remove a filament setup
gcode:
  {% if 'FILAMENT' not in params|upper %}
    {action_respond_info("RETRACTION: FILAMENT must be defined use \"RETRACTION_REMOVE FILAMENT=id\" as a minimum")}
  {% else %}
    {% if not printer.save_variables.variables.retraction %} # nothing setup'ed yet
      {action_respond_info("RETRACTION: Nothing to remove, no save_variable defined yet")}
    {% else %}
      {% set id = params.FILAMENT|string %}
      {% set retraction_dic = printer.save_variables.variables.retraction %}
      {% for filament in retraction_dic %}
        {% if id == filament.id %}
          {action_respond_info("RETRACTION: Remove Filament %s" % id)}
          {% set _dummy = retraction_dic.pop(loop.index0) %}
        {% elif loop.last %} # filament not found
          {action_respond_info("RETRACTION: Nothing to remove, Filament %s not defined" % id)}
        {% endif %}
      {% endfor %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=retraction VALUE="{retraction_dic}"
  {% endif %}

[gcode_macro RETRACTION_SELECT]
description: Set retraction speed depending on filament 
gcode:
  {% if not printer.save_variables.variables.retraction %}
    {action_respond_info("RETRACTION: No filament defined ABORDED")}
  {% else %}
    {% set id = params.FILAMENT|default('None')|string %}
    {% set retraction_dic = printer.save_variables.variables.retraction %}
    {% set found = {'id'    : 'default',
                    'retract'    : printer.configfile.settings.firmware_retraction.retract_speed,
                    'unretract'  : printer.configfile.settings.firmware_retraction.unretract_speed} %}
    {% for filament in retraction_dic %}
      {% if id == filament.id %}
        {% set _dummy = found.update({'id': filament.id}) %}
        {% set _dummy = found.update({'retract': filament.retract}) %}
        {% set _dummy = found.update({'unretract': filament.unretract}) %}
      {% endif %}
    {% endfor %}
    SET_RETRACTION RETRACT_SPEED={found.retract} UNRETRACT_SPEED={found.unretract}
    {action_respond_info("RETRACTION:
                          Filament: %s
                          RETRACTION: %1.02f UNRETRACTION: %1.02f" % (found.id, found.retract, found.unretract))}
  {% endif %}