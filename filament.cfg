[firmware_retraction]
retract_length: 0.75 ; length of filament (in mm) at G10/G11
unretract_extra_length: 0 ; length of additional filament (in mm) at G11
retract_speed: 50
unretract_speed: 30

#####################################################################
# 	Macro
#####################################################################
[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  ##### set default parameter value #####
  {% set wait = params.WAIT|default(0) %}
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  ##### end of definitions #####
  # Ball up the filament tip
  G92 E0                       ; zero the extruder
  M82                          ; absolute extrusion
  G1 E2 F{speed.retract * 2}
  G1 E0 F{speed.retract * 2}
  G1 E4 F{speed.retract * 2}
  G1 E0 F{speed.retract * 2}
  G1 E8 F{speed.retract * 2}
  G1 E0 F{speed.retract * 2}
  M83                          ; relative extrusion
  G1 E-25 F{speed.retract * 2}
  G4 P{wait|int * 1000}

[gcode_macro FILAMENT_LOAD]
description: Load filament and disable rounout while running
gcode:
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set length = printer['gcode_macro _USER_VARIABLE'].filament %}
  {% set pos = printer['gcode_macro _USER_VARIABLE'].purge.purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### Get hardware enables #####
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp %}
  ##### calc movement high #####
  {% set move_z = z_hop if act_z < z_hop else act_z %}
  ##### end of definitions #####
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
    {% if hw_ena.runout == 'motion' %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    ## Move to waste bin
    _CG28                                       ; home if not already homed
    G90                                         ; absolute positioning
    G1 Z{move_z} F{speed.z_hop}                 ; move head to minimum
    G1 X{pos.x} Y{pos.y} F{speed.travel}        ; move to purge bucket location
    {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=BLUE {% endif %}
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    {% if hw_ena.display == 'true' %} _LCD_KNOB {% endif %}
    G1 Z{pos.z} F{speed.z_hop} 
    M83                                         ; set extruder to relative
    G1 E{length.load_distance} F{speed.load}    ; quickly load 90mm filament
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
    {% if hw_ena.runout == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: true"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}
    G1 E{length.load_extrude} F{speed.retract}  ; slower extrusion for hotend path
    G1 E-{length.retract.end} F{speed.retract}  ; retract 
    # clean nozzle
    _WIPE
    G1 Z{move_z} F{speed.z_hop}        
    G1 X{pos.x} Y{pos.y} F{speed.travel}        ; move to purge bucket location
    # restore old extruder temperature
    M109 S{printer.extruder.target}
    _PRINT_AR T="Filament loaded"
    ## set back extrude and movment if needed
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    _PRINT_AR T="Filament loading disabled while printing!"
  {% endif %}
 
[gcode_macro FILAMENT_UNLOAD]
description: Unload filament and disable rounout while running
gcode:
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set length = printer['gcode_macro _USER_VARIABLE'].filament %}
  ##### get hardware enables #####
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int %}
  ##### end of definitions #####
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    {% if hw_ena.runout == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: false"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=BLUE {% endif %}
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    # Ball up the filament tip and retract out past the extruder gears
    {% if hw_ena.display == 'true' %} _LCD_KNOB {% endif %}
    _FILAMENT_BALL WAIT=3
    M83 ; Relative extrusion
    G1 E-{length.unload_distance} F{speed.load}
    M400
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
    # restore old extruder temperature
    M109 S{printer.extruder.target}
    _PRINT_AR T="Filament unloaded"
    ## set back extrude if needed
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    _PRINT_AR T="Filament unloading disabled while printing!"
  {% endif %}

## purge and clean the nozzle in prep for printing    
[gcode_macro NOZZLECLEAN]
description: Move to bucket and scrub nozzle
gcode:
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set pos = printer['gcode_macro _USER_VARIABLE'].purge.purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  SET_GCODE_OFFSET Z=0.0
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                                ; home if not already homed
  G90                                  ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F{speed.z_hop}         ; move head up
  {% endif %}
  G1 X{pos.x} Y{pos.y} F{speed.travel} ; move to purge bucket location
  {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp}         ; heat extruder and wait
  {% endif %}
  G1 Z{pos.z} F{speed.z_hop}  ; lower Z
  G92 E0                      ; reset Extruder
  M83                         ; relative extrusion
  G1 E2 F500                  ; purge filament
  G1 E2 F800                  ; purge filament
  G1 E4 F800                  ; retract filament
  G4 P5000
  _WIPE
  # restore old extruder temperature
  M109 S{printer.extruder.target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  ## set back extrude and movment if needed
  {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}

[gcode_macro _WIPE]
description: Helper: Wipe nozzle at bucket
gcode: 
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set wipe = printer['gcode_macro _USER_VARIABLE'].purge.wipe %}
  ##### end of definitions #####
  G90 ; absolute positioning
  G0 X{wipe.start.x} Y{wipe.start.y} Z{wipe.start.z} F{speed.wipe}
  # move head diagonal to brush
  {% for moves in range(0, wipe.cnt) %}
    {% for coordinate in [wipe.start.x, wipe.end.x] %}
      G0 X{coordinate} Y{wipe.start.y + wipe.offset * moves} F{speed.wipe}
    {% endfor %}
  {% endfor %}
  G0 X{wipe.end.x} Y{wipe.end.y} Z{wipe.end.z} F{speed.wipe}
    
[gcode_macro PRIME_LINE]
description: Purge nozzle at defined position
gcode:
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set prime = printer['gcode_macro _USER_VARIABLE'].prime %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  ##### get parameter and set default #####
  {% set prime_height = params.PRIME_HEIGHT|default(prime.pos.z)|float %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  {% if prime.dir|string == 'X+' %}
    {% set first_line = 'X%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
    {% set second_line = 'X-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
    {% set move_to_side = 'Y%s' % prime.spacing %}
  {% elif prime.dir|string == 'X-' %}
    {% set first_line = 'X-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
    {% set second_line = 'X%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
    {% set move_to_side = 'Y%s' % prime.spacing %}
  {% elif prime.dir|string == 'Y+' %}
    {% set first_line = 'Y%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
    {% set second_line = 'Y-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
   {% set move_to_side = 'X%s' % prime.spacing %}
  {% elif prime.dir|string == 'Y-' %}
    {% set first_line = 'Y-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
    {% set second_line = 'Y%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, speed.prime) %}
    {% set move_to_side = 'X%s' % prime.spacing %}
  {% else %}
    {action_raise_error("_USER_VARIABLE.prime.dir is not spezified as X+, X-, Y+ or Y-")}
  {% endif %} 
  ##### end of definitions #####
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28                                            ; home if not already homed
  G92 E0                                           ; reset Extruder
  G90                                              ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F{speed.z_hop}                     ; move head up
  {% endif %}
  G1 X{prime.pos.x} Y{prime.pos.y} F{speed.travel} ; move to start position
  G1 Z{prime_height} F{speed.z_hop}                ; move Z Axis down
  G91                                              ; relative positioning
  {% for segment in range(prime.seg|int) %}        ; draw the first line
    G1 {first_line}
  {% endfor %}    
  G1 {move_to_side}                                ; move to side
  {% for segment in range(prime.seg|int) %}        ; draw the second line
    G1 {second_line}
  {% endfor %}
  G92 E0                                           ; reset Extruder
  ## set back extrude and movment if needed
  {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

# [gcode_macro SELECT_PA]
# description: Set PA depending on nozzle and filament 
# gcode:
#   ##### set default parameter values #####
#   {% set nozzle = params.NOZZLE|default(0.4)|float %}
#   {% set filament = params.FILAMENT|default('None')|string %}
#   #####   Pressure Advance values for different filaments & nozzles #####
#   {% set pa_def = [('PLA_SUNCREATE',0.4, 0.0325),
# 		           ('PET_SUNCREATE',0.4, 0.055),
#                    ('ABS+_BEING',0.4, 0.04)] %}
#   #######################################################################
#   {% set elem_cnt = pa_def|length %}
#   {% set ns = namespace(index = elem_cnt) %}
#   {% for index in range(elem_cnt) %}
#      {% if pa_def[index][0]|lower == filament|lower and pa_def[index][1]|float == nozzle %}
#        {% set ns.index = index %}
#     {% endif %}
#   {% endfor %}
#   {% if ns.index < elem_cnt %}
#     {% set elem_filament = pa_def[ns.index][0]|string %}
#     {% set elem_nozzle = pa_def[ns.index][1]|float %}
#     {% set elem_pa = pa_def[ns.index][2]|float %}
#   {% else %}
#     {% set elem_filament = 'default' %}
#     {% set elem_nozzle = 0.4 %}
#     {% set elem_pa =  printer.configfile.settings['extruder'].pressure_advance|float %}
#   {% endif %}
#   ##### end of definitions #####
#   SET_PRESSURE_ADVANCE ADVANCE={elem_pa}
#   {action_respond_info("PRESSURE_ADVANCE:
#                         FILAMENT: %s
#                         NOZZLE: %1.1f
#                         VALUE: %.4f" % (elem_filament, elem_nozzle, elem_pa))}

# [gcode_macro SELECT_RETRACT]
# description: Set retraction depending on filament 
# gcode:
#   ##### set default parameter values #####
#   {% set filament = params.FILAMENT|default('None')|string %}
#   #####   Pressure Advance values for different filaments & nozzles #####
#   {% set re_def = [('PLA_SUNCREATE', 50, 30),
#                    ('ABS+_BEING', 50, 30),
# 		           ('PET_SUNCREATE', 25, 10)] %}
#   #######################################################################
#   {% set elem_cnt = re_def|length %}
#   {% set ns = namespace(index = elem_cnt) %}
#   {% for index in range(elem_cnt) %}
#     {% if re_def[index][0]|lower == filament|lower %}
#       {% set ns.index = index %}
#     {% endif %}
#   {% endfor %}
#   {% if ns.index < elem_cnt %}
#     {% set elem_filament = re_def[ns.index][0]|string %}
#     {% set elem_re = re_def[ns.index][1]|float %}
#     {% set elem_un_re = re_def[ns.index][2]|float %}
#   {% else %}
#     {% set elem_filament = 'default' %}
#     {% set elem_re =  printer.configfile.settings['firmware_retraction'].retract_speed|float %}
#     {% set elem_un_re =  printer.configfile.settings['firmware_retraction'].unretract_speed|float %}
#   {% endif %}
#   ##### end of definitions #####
#   SET_RETRACTION RETRACT_SPEED={elem_re} UNRETRACT_SPEED={elem_un_re}
#   {action_respond_info("FIRMWARE_RETRACTION:
#                         FILAMENT: %s
#                         RETRACT_SPEED: %1.1f mm/s
#                         UNRETRACT_SPEED: %1.1f mm/s" % (elem_filament, elem_re, elem_un_re))}