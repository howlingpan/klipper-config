[pause_resume]

[display_status]

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

#####################################################################
#  Macros
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_execute: False
gcode:
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set park = printer['gcode_macro _USER_VARIABLE'].park.bed %}
  {% set retract = printer["gcode_macro _USER_VARIABLE"].filament.retract.cancel %}
  {% set filter_off = printer['gcode_macro _USER_VARIABLE'].peripheral.filter.run_after_print %}
  {% set vent_on = printer['gcode_macro _USER_VARIABLE'].peripheral.vent.on_val %}
  {% set vent_off = printer['gcode_macro _USER_VARIABLE'].peripheral.vent.run_after_print %}
  {% set unload_sd = printer['gcode_macro _USER_VARIABLE'].unload_sd|lower %}
  ##### get hardware enables #####
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  ##### store min and current extrution temp in variable ##### 
  {% set extruder_min = printer.configfile.settings.extruder.min_extrude_temp%}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=True
  M117 Cancel
  CANCEL_PRINT_BASE
  {% if printer['gcode_macro PRINT_START'].state == 'Prepare' %}
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % extruder_min)}
      M109 S{extruder_min}                         ; heat extruder and wait
    {% endif %}
    M83
    G1 E-{retract} F{speed.retract}
  {% endif %}
  TURN_OFF_HEATERS                                 ; turn off heaters
  {% if params.PARK|default(0)|int == 1 %}
    G90
    G0 Z{park.z} F{speed.z_hop}                    ; move nozzle to z high first
    G0 X{park.x} Y{park.y} F{speed.travel}         ; home to get toolhead in the middle
  {% endif %}
  M107                                             ; turn off fan
  {% if hw_ena.chamber == 'fan' %} M141 S{vent_on} {% endif %} ; vent chamber (setting fan to below ambient)
  _ADD_PRINT_TIME
  {% if error == 1 %}
    {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=RED BLINK=0.2 {% endif %}
    _SD_PRINT_STATS R='abort'
  {% else %}
   {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=BLUE {% endif %}
    _SD_PRINT_STATS R='canceled'
  {% endif %}
  _SD_PRINTER_STATS
  {% if hw_ena.caselight == 'true' %} _CASELIGHT_OFF {% endif %}
  {% if hw_ena.chamber == 'fan' %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if hw_ena.filter == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if unload_sd|lower == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore: {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500}
gcode:
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set retract = printer["gcode_macro _USER_VARIABLE"].filament.retract.pause %}
  ##### get hardware enables #####
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  ##### use PARAMS or purge bin as default and calc lift position #####
  {% set pos = {'x': params.X|default(printer["gcode_macro _USER_VARIABLE"].purge.purge.x), 
                'y': params.Y|default(printer["gcode_macro _USER_VARIABLE"].purge.purge.y),
                'z': [(printer.toolhead.position.z + 2.0), printer.toolhead.axis_maximum.z]|min } %}
  ##### store coordinates to restore them at resume #####
  {% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
                                 'extrude'    : printer.gcode_move.absolute_extrude},
                    'speed'   : printer.gcode_move.speed} %}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore VALUE="{restore}"
  {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=BLUE BLINK=1 {% endif %}
  {% if printer.extruder.can_extrude|lower == 'false' %}
    {action_respond_info("Extruder Temp to low heat to %2dC" % printer.configfile.settings.extruder.min_extrude_temp)}
    M109 S{printer.configfile.settings.extruder.min_extrude_temp}
  {% endif %}
  M83
  G0 E-{retract} F{speed.retract}
  PAUSE_BASE
  G90
  G0 Z{pos.z} F{speed.z_hop}
  G0 X{pos.x} Y{pos.y} F{speed.travel}
  M104 S{printer.extruder.target}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set extrude = printer["gcode_macro _USER_VARIABLE"].filament.retract.pause %}
  {% set restore = printer["gcode_macro PAUSE"].restore %}
  ##### get hardware enables #####
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=RED {% endif %}
  RESUME_BASE VELOCITY={params.VELOCITY|default(speed.travel)}  
  G0 E{extrude} F{speed.retract}
  G0 F{restore.speed}
  {% if restore.absolute.extrude|lower == 'true' %}      M82 {% endif %}
  {% if restore.absolute.coordinates|lower == 'false' %} G91 {% endif %}

#####################################################################
#                 LCD menu that works with mainsail                 #
#####################################################################
#   Main
#   ...
#   + SD Card
#       + Show loaded file
#       + Load File (only if not printing and no file loaded)
#       + Unload File (only if not printing and a file is loaded)
#       + Start printing (only if not printing and a file is loaded)
#       + Pause printing (only while printing)
#       + Resume printing (only while paused)
#       + Cancel printing (only while paused)

[menu __main __sdcard]
type: list
enable: {'virtual_sdcard' in printer}
name: SD Card

[menu __main __sdcard __file]
type: command
name: File: {printer.print_stats.filename}
index: 0

[menu __main __sdcard __load]
type: vsdlist
#type: list
#event_sender: __vsdfiles
enable: {not printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Load file
index: 1

[menu __main __sdcard __unload]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Unload file
index: 2
gcode:
  # back is needed to reload the modified menu structure
  {menu.back()}
  SDCARD_RESET_FILE

[menu __main __sdcard __start]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Start print
index: 3
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  M24

[menu __main __sdcard __pause]
type: command
enable: {printer.print_stats.state == "printing"}
name: Pause print
gcode:
  # back is needed to reload the modified menu structure
  {menu.back()}
  PAUSE

[menu __main __sdcard __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  RESUME

[menu __main __sdcard __cancel]
type: command
enable: {printer.print_stats.state == "paused"}
name: Cancel print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  CANCEL_PRINT