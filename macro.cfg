##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  CHAMBER_TEMP  : Target temperature for the chamber fan controll
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
##  LAYER_HEIGHT  : Hight of prime_line should be set to layer_hight
##  Z_ADJUST      : Add extra z offset via slicer
[gcode_macro PRINT_START]
description: All cmd needed at print start
variable_var: {'temp'        : {'extruder': 245.0, 'bed': 100.0, 'chamber': 40.0, 'endstop': 0.0},
               'delta'       : {'chamber': 5.0, 'bed': 10},
               'time'        : {'soak' : 1800, 'soak_extra': 900},
               'redo_qgl'    : True,
               'prime_height': 0.0,
               'z_adjust'    : 0.0}
## Valid state 
##   Prepare    : Store Params
##   HeatBed    : heat up bed and decide if soak is needed 
##   HeatSoak   : loop the time specified with SOAK
##   Chamber    : decide if extra soak is needed
##   ChamberSoak: loop the time specified with EXTRA_SOAK or Chamber target reached
##   Final      : all what needs to be done after wait time
variable_state: 'Prepare'
gcode:
  STATUS_READY
  {% set user_var = printer['gcode_macro _USER_VARIABLE'].print_start %}
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  # get actual temp from extra sensor or heater sensor
  {% set actBed = printer['temperature_sensor bed'].temperature|float|round(1) if 'temperature_sensor bed' in printer 
             else printer.heater_bed.temperature|float|round(1) %}
  ##############################  Prepare phase only done at the first exection of PRINT_START  ##############################
  {% if state == 'Prepare' %}
    #############  Store input parameters  #############
    {% set var = {'temp': {'extruder': params.EXTRUDER_TEMP|default(245)|float|round(1),
                           'bed'     : params.BED_TEMP|default(100)|float|round(1),
                           'chamber' : params.CHAMBER_TEMP|default(50)|float|round(1),
                           'endstop' : 0.0},
                  'delta': {'chamber': params.DELTA_C|default(5)|float|round(1), 
                            'bed'    : params.DELTA_B|default(10)|float|round(1)},
                  'time' : {'soak'      : params.SOAK|default(30)|int * 60,
                            'soak_extra': params.CHAMBER_SOAK|default(15)|int * 60 if params.EXTRA_SOAK|default('true') == 'true' and 
                                                                      hw_ena.chamber != 'none' 
                                          else 0},
               'redo_qgl'    : True,
               'prime_height': params.LAYER_HEIGHT|float * user_var.prime_mult|float if LAYER_HEIGHT in params
                          else printer['gcode_macro _USER_VARIABLE'].prime.pos.z|float,
               'z_adjust'    : params.Z_ADJUST|default(0.0)|float} %}
    PAUSE_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatBed"'
    UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
  ##############################  HeatBed Phase heat up the bed  ##############################    
  {% elif state == 'HeatBed' %}
    STATUS_HEATING
    {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
    {% set park = printer['gcode_macro _USER_VARIABLE'].park.bed %}
    # get max allow bed temp from config. Lower it by 5C to avoid shutdown
    {% set cfg_bed_max = printer.configfile.settings.heater_bed.max_temp|float|round(1) - 5.0 %}
    # calc target values
    {% set targetBed = var.temp.bed - var.delta.bed %}
    {% set soakBed = [(var.temp.bed + user_var.bed_up), cfg_bed_max]|min %}
    {% if hw_ena.relay == 'true' %} _HEATER_ON {% endif %}
    {% if hw_ena.caselight == 'true' %} _CASELIGHT_ON {% endif %}
    {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=RED BLINK=1  {% endif %}
    {% if hw_ena.chamber == 'fan' %} M141 S0  {% endif %}   ; exhaust fan off
    {% if hw_ena.filter == 'true' %} _FILTER_ON {% endif %} ; activate filter
    _CG28                                                   ; home if needed
    # Move to Middle
    G90
    G0 Z{park.z} F{speed.z_hop}                             ; move nozzle to z high first
    G0 X{park.x} Y{park.y} F{speed.travel}                  ; home to get toolhead in the middle
    # check if soak time is 0 or if the bed is still hot
    {% if (var.time.soak <= 0) or (actBed >= targetBed) %}
      M117 Heating Extruder
      {% set text = 'heat soak disabled' if var.time.soak <= 0 else 'heat soak not needed' %}
      _PRINT_AR T="{"Bed temp: act %3.1fC min %3.1fC (target(%3.1fC) - delta(%2.1fC)) %s" % 
                    (actBed,targetBed,var.temp.bed,var.delta.bed,text)}"
      {% set _dummy = var.update({'redo_qgl' : False}) %}
      M140 S{var.temp.bed}      ; heat bed
      M109 S{var.temp.extruder} ; heat extruder and wait
      M190 S{var.temp.bed}      ; heat bed and wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      M117 Heating Bed
      _PRINT_AR T="{"Bed temp: act %3.1fC min %3.1fC (target(%3.1fC) - delta(%2.1fC)) heat soak needed" % 
                   (actBed,targetBed,var.temp.bed,var.delta.bed)}"
      _PRINT_AR T="{"Set Bed temp to %3.1fC instead of %3.1fC for faster heat soak" % (soakBed,var.temp.bed)}"    
      M106 S90              ; switch part cooling ~35% to move air in chamber
      M140 S{soakBed}       ; heat bed
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
      {% set next_duration = user_var.ival if var.time.soak > user_var.ival else var.time.soak %}
      {% set _dummy = var.time.update({'soak': var.time.soak - user_var.ival}) if var.time.soak > user_var.ival 
                 else var.time.update({'soak': 0}) %}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% endif%}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    _RUNOUT_INFO    
  ##############################  Heatsoak Phase call the delay macro until time is over  ##############################
  {% elif state == 'HeatSoak' %}
    #############  Get filament runout info  #############
    {% if hw_ena.runout == 'switch' or hw_ena.runout == 'motion' %}
      {% if printer["filament_" + hw_ena.runout + "_sensor runout"].enabled|lower == 'true' %}
        {% set filament_detected = printer["filament_" + hw_ena.runout + "_sensor runout"].filament_detected %}
      {% elif 'filament_loaded' in printer.save_variables.variables %}
        {% set filament_detected = printer.save_variables.variables.filament_loaded %}
      {% else %}
        {% set filament_detected = 'true' %}
      {% endif %}
    {% elif hw_ena.runout == 'file' %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = 'true' %}
    {% endif %}
    {% if filament_detected|lower == 'true' %}
      # switch on extruder at _USER_VARIABLE.print_start_extruder_time
      {% if var.time.soak <= (user_var.time.extruder + var.temp.extruder - 240) and 
             var.temp.extruder != printer.extruder.target %}
        M104 S{var.temp.extruder} ; heat extruder
      {% endif %}
      # switch bed to first layer temp at _USER_VARIABLE.print_start_bed_time 
      {% if var.time.soak <= user_var.time.bed and bed != printer.heater_bed.target|int %}
        M140 S{var.temp.bed} ; heat bed
      {% endif %}
      # check remaining time 
      {% if var.time.soak > 0 %}
        {% set next_duration = var.time.soak if user_var.ival >= var.time.soak else user_var.ival %}
        {% set _dummy = var.time.update({'soak': 0}) if user_var.ival >= var.time.soak 
                   else var.time.update({'soak': var.time.soak - user_var.ival}) %}}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
      {% else %}
        # go to chamber soak wait
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
        _PRINT_AR T="{"Bed act temp=%3.1fC heat soak done" % (actBed)}"
      {% endif%}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    {% else %}
      _PRINT_AR T="No Filament loaded, print aborded!"
      UPDATE_DELAYED_GCODE ID=_EXECUTE_CANCEL_PRINT DURATION=1
    {% endif %}
  ##############################  Decide if extended soaking is needed  ##############################
  {% elif state == 'Chamber' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer['temperature_fan chamber'].temperature|round(1)    if hw_ena.chamber == 'fan'
                   else printer['temperature_sensor chamber'].temperature|round(1) if hw_ena.chamber == 'sensor'
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %}
      _PRINT_AR T="{"Chamber temp: act %2.1fC min %2.1fC (target(%2.1fC) - delta(%2.1fC)) heat soak needed" %
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"ChamberSoak"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      {% set text = 'heat soak disabled' if var.time.soak_extra <= 0 else 'heat soak not needed' %}
      _PRINT_AR T="{"Chamber temp: act %2.1fC min %2.1fC (target(%2.1fC) - delta(%2.1fC)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5  
    {% endif %}
  ############################## extra Heat Soak terminated by chamber temp  ##############################
  {% elif state == 'ChamberSoak' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer['temperature_fan chamber'].temperature|round(1)    if hw_ena.chamber == 'fan'
                   else printer['temperature_sensor chamber'].temperature|round(1) if hw_ena.chamber == 'sensor'
                   else 0 %}
    # check remaining time and temp difference 
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %}
      {% set next_duration = var.time.soak_extra if user_var.ival >= var.time.soak_extra else user_var.ival %}
      {% set _dummy = var.time.update({'soak_extra': 0}) if user_var.ival >= var.time.soak 
                 else var.time.update({'soak_extra': var.time.soak_extra - user_var.ival}) %}}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% else %}
      {% set text = 'heat soak timed out' if var.time.soak_extra == 0 else 'heat soak temp reached' %}
      _PRINT_AR T="{"Chamber temp: act %2.1fC min %2.1fC (target(%2.1fC) - delta(%2.1fC)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% endif %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
  ##############################  all whats need to run at the end  ##############################
  {% elif state == 'Final' %}
    RESUME_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"' ; set state for next print    
    {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=RED  {% endif %}
    M106 S0                                                               ; turn off part cooling fan
    G34                                                                   ; home & QGL
    # BED_MESH_LOAD AUTO=true                                               ; bed mesh load or generatate
    {% if hw_ena.chamber == 'fan' %} M141 S{var.temp.chamber} {% endif %} ; set target temp for exhaust fan
    NOZZLECLEAN
    {% set calibrate_z_next = True if hw_ena.auto_z_offset == 'z_calib' or hw_ena.auto_z_offset == 'z_calib+flexplate' else False %}
    SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=calibrate_z_next VALUE={calibrate_z_next}
    G28 Z
    {% if hw_ena.auto_z_offset == 'z_calib+flexplate' or hw_ena.auto_z_offset == 'z_calib'   %} CALIBRATE_Z              {% endif %}
    {% if hw_ena.auto_z_offset == 'z_calib+flexplate' or hw_ena.auto_z_offset == 'flexplate' %} _SET_PLATE_OFFSET MOVE=0 {% endif %}
    SET_GCODE_OFFSET Z_ADJUST={var.z_adjust} MOVE=1
    _PRINT_OFFSET
    STATUS_PRINTING
    PRIME_LINE PRIME_HEIGHT={var.prime_height}
    {% if hw_ena.endstop_temp  == 'true' %}
      {% set _dummy = var.temp.update({'endstop': printer['temperature_sensor endstop'].temperature}) %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    {% endif %}
    G21                                                 ; set units to millimeters
    G90                                                 ; use absolute coordinates
    M83                                                 ; use relative distances for extrusion
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}    
 
# This is called every PRINT_START interval
[delayed_gcode _START_PRINT_WAIT]
gcode:
  # Print remaining time
  {% macro print_time(text, time) %}
    M117 {'%s' % text} {(time|int // 60)}:{'%02d' % (time|int % 60)}
  {% endmacro %}
  {% if printer['gcode_macro PRINT_START'].state == 'HeatSoak'%}
   { print_time("HEAT SOAK", printer['gcode_macro PRINT_START'].var.time.soak) }
  {% elif printer['gcode_macro PRINT_START'].state == 'ChamberSoak' %}
    { print_time("SOAK", printer['gcode_macro PRINT_START'].var.time.soak_extra) }
  {% endif %}
  # Check CANCLE_PRINT was executed
  {% if printer['gcode_macro CANCEL_PRINT'].execute|lower == 'false' %}
    PRINT_START  ; Junp back to PRINT_START
  {% else %}
    # break loop and insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}
  
[gcode_macro PRINT_END]
description: All commands after the print
gcode:
  STATUS_OFF
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Get user defines #####
  {% set speed = printer['gcode_macro _USER_VARIABLE'].speed %}
  {% set park = printer['gcode_macro _USER_VARIABLE'].purge.purge %}
  {% set retract = printer['gcode_macro _USER_VARIABLE'].filament.retract.end %}
  {% set filter_off = printer['gcode_macro _USER_VARIABLE'].peripheral.filter.run_after_print %}
  {% set vent_on = printer['gcode_macro _USER_VARIABLE'].peripheral.vent.on_val %}
  {% set vent_off = printer['gcode_macro _USER_VARIABLE'].peripheral.vent.run_after_print %}
  {% set unload_sd = printer['gcode_macro _USER_VARIABLE'].unload_sd|lower %}
  ##### get hardware enables #####
  {% set hw_ena = printer['gcode_macro _USER_VARIABLE'].hw_ena %}
  ##### Calculate save move #####
  {% set max = printer.toolhead.axis_maximum %}
  {% set act = printer.toolhead.position %}
  {% set safe = {'x': 20.0 if act.x|float < (max.x|float - 20.0) else -20.0,
                 'y': 20.0 if act.y|float < (max.y|float - 20.0) else -20.0,
                 'z':  2.0 if act.z|float < (max.z|float -  2.0) else (max.z|float - act.z|float)} %}
  ##### end of definitions #####
  M400                                                         ; wait for buffer to clear
  G92 E0                                                       ; zero the extruder
  M83                                                          ; relative extrusion
  G1 E-{retract} F{speed.retract}                              ; retract filament
  G91                                                          ; relative positioning
  G0 X{safe.x} Y{safe.y} Z{safe.z} F{speed.travel}             ; move nozzle to remove stringing
  TURN_OFF_HEATERS                                             ; turn off heaters
  M107                                                         ; turn off fan
  {% if hw_ena.chamber == 'fan' %} M141 S{vent_on} {% endif %} ; vent chamber (setting fan to below ambient)
  G90                                                          ; absolute positioning
  G0 X{park.x} Y{park.y} F{speed.travel}                       ; park nozzle at brush bin
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  {% if hw_ena.display == 'true' %} _LCD_KNOB COLOR=GREEN {% endif %}
  {% if hw_ena.caselight == 'true' %} _CASELIGHT_OFF {% endif %}
  {% if hw_ena.chamber == 'fan' %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if hw_ena.filter == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if hw_ena.endstop_temp  == 'true' %} 
    {action_respond_info("PRINT_END
                          BED temp: act %3.1fC
                          Endstop temp: start %3.1fC end %3.1fC" % (printer['temperature_sensor bed'].temperature if 'temperature_sensor bed' in printer 
                                                                 else printer.heater_bed.temperature, 
                                                                      printer['gcode_macro PRINT_START'].var.temp.endstop,
                                                                      printer['temperature_sensor endstop'].temperature))}
  {% endif %}
  {% if unload_sd|lower == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  #####  set speed and extruder factor to default  #####
  M220 S100
  M221 S100

[gcode_macro G34]
description: Reset bed mesh, offset and execute QGL
gcode:
  _PRINT_AR T="Home & QGL" SHOW_LCD=true
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0 MOVE=1
  {% if printer['gcode_macro PRINT_START'].var.redo_qgl|lower == 'true' %}
    _PRINT_AR T="QGL forced by PRINT_START"
    QUAD_GANTRY_LEVEL PARK=false HOME=false
  {% elif printer.quad_gantry_level.applied|lower == 'false' %} %} 
    _PRINT_AR T="QGL not executed yet"
    QUAD_GANTRY_LEVEL PARK=false HOME=false
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

[gcode_macro M204]
description: Set and limit acceleration to cfg value
rename_existing: M204.1
gcode:
  {% set accel = params.S|float                      if 'S' in params and params.S|float > 0
            else [params.P|float,params.T|float]|min if 'P' in params and 'T' in params and 
                                                     params.P|float > 0 and params.T|float > 0 %}
  {% if accel is defined %}  
    {% set lim_accel          = [accel,             printer.configfile.settings.printer.max_accel         ]|min %}
    {% set lim_accel_to_decel = [(accel / 2)|float, printer.configfile.settings.printer.max_accel_to_decel]|min %}
    SET_VELOCITY_LIMIT ACCEL={lim_accel} ACCEL_TO_DECEL={lim_accel_to_decel}
  {% else %}
    {action_respond_info("Invalid M204 command \"M204 %s\"" % rawparams)}
  {% endif %}
  
[gcode_macro M900]
description: Set pressure advance
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

[gcode_macro _PRINT_OFFSET]
description: Helper: Print gcode offsets defined by script or user in PRINT_START
gcode:
  {% set auto_z_offset = printer['gcode_macro _USER_VARIABLE'].hw_ena.auto_z_offset|lower %}
  {% set text = ["GCODE OFFSET for Z applied from:"] %}
  {% if auto_z_offset == 'z_calib+flexplate' or auto_z_offset == 'flexplate' %}
    {% set _dummy = text.append("Plate %s %.3fmm" % 
           (printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].name,
            printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].offset)) %}
  {% endif %}
  {% if auto_z_offset == 'z_calib+flexplate' or auto_z_offset == 'calib' %}
    {% set _dummy = text.append("Z_CALIBRATE %.3fmm" % printer.z_calibration.last_z_offset) %}
  {% endif %}
  {% set _dummy = text.append("User %.3fmm" % printer['gcode_macro PRINT_START'].var.z_adjust) %}
  {% set _dummy = text.append("Total %.3fmm" % printer.gcode_move.homing_origin.z) %}
  {action_respond_info(text|join("\n"))}

[gcode_macro _RUNOUT_INFO]
description: Helper: Print runout sensor status
gcode:
  {% set runout = printer['gcode_macro _USER_VARIABLE'].hw_ena.runout|lower %}
  {% set out = ['RUNOUT: ' + runout|capitalize + ' Sensor'] if runout == 'switch' or runout == 'motion'
          else ['RUNOUT: Stored in file']                   if runout == 'file'
          else ['RUNOUT: Not monitored'] %}
  {% set enable = printer["filament_" + runout + "_sensor runout"].enabled if runout == 'switch' or runout == 'motion'
             else 'false' %}
  {% set _dummy = out.append('Enabled: ' + enable|lower) if runout == 'switch' or runout == 'motion' %}
  {% set detected = printer["filament_" + runout + "_sensor runout"].filament_detected if enable|lower == 'true'
               else printer.save_variables.variables.filament_loaded                   if runout == 'file' %}
  {% set _dummy = out.append('Detect Filament: ' + detected|lower) if enable|lower == 'true' or runout == 'file'%}
  {action_respond_info(out|join("\n"))}

## PrusaSlicer/SuperSlicer:
## Add at the start gcode section
## _LAYER TOTAL=[total_layer_count] RESPOND=0
##
## Add at the layer change gcode section
## _LAYER CURRENT={layer_num+1}
[gcode_macro _LAYER]
description: Pass the current layer and the total amount of layers by your Slicer.
variable_layer: {'current': 0, 'total':0}
gcode:
  {% set _dummy = layer.update({'total':params.TOTAL|int}) if ('TOTAL' in params and params.TOTAL|int > 0) %}
  {% set _dummy = layer.update({'current':params.CURRENT|default(0)|int}) %}
  SET_GCODE_VARIABLE MACRO=_LAYER VARIABLE=layer VALUE="{layer}"
  {% if params.RESPOND|default(printer['gcode_macro _USER_VARIABLE'].respond.layer)|int == 1 %}
    {action_respond_info("Layer %s of %s" % (layer.current, layer.total))}
  {% endif %}

[gcode_macro TOGGLE_LAYER_OUTPUT]
description: Enable/Disable Console output of _LAYER
gcode:
  {% set respond = printer['gcode_macro _USER_VARIABLE'].respond %}
  {% set _dummy = respond.update({'layer':1}) if respond.layer|int == 0 else respond.update({'layer':0}) %}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond}"